


            Contact Management System

1 create a project - ng new ContactApp(projet_name)
2 cd ContactApp(projet_name)
3 code .
4 Project run - ng serve --open
5 clear src/app/app.component.html file
6 Install Bootstrap fontAwsome and google fonts
  ->To Install Bootstrap - npm i bootstrap  //copy paste links from site in index.html
  ->To Install FontAwsome - npm i --save @fortawesome/fontawesome-free  //copy paste links from site in index.html
  ->To configure - To avoid site down issues
        In angular.json
7 Create Component
  ->Contact Manager - ng g c contactManager
  ->Add Contact - ng g c addContact
  ->ng g c UpdateContact - ng g c updateContact
  ->ng g c View Contact - ng g c viewContact

8 Setup path for each component that we needed to display in web pages
  ->app-routing.module.ts,
   Routes = [
    // http://localhost:4200 ->'' path for redirecion -- http"//localhost:4200/cpntact/admin
    {
      path:'',redirectTo:'contact/admin',pathMatch:'full'
    },
    {
      //path for contact manager
      path:'contact/admin',component:ContactManagerComponent
    }
  ];
9 Componets designing

10 Creation API for fetching data

11 Create a folder for server (server 9folder name) and db.json file (src/server/db.json)

12 Create contact data add add to db.json file (src/server/db.json)

13 Sever run
  -> open new terminal (cmd)
    ->cd src
    ->cd server(server folder name)
    ->npm init (for creating package.json)
    -> npm i json-server  (to install package)
    ->Edit package.json file as
      "scripts":{
          "start":"json-server --watch db.json --port 3000"
        },
    ->npm start

14 create Models(folder in src) for Contact and Group 
    ->src/models/myContact.ts
    ->src/models/myGroups.ts

15 Data fetching
    Javascript - promise (fetch()) ->   .then() .catch()
    Typescript - Observable ->  .subscribe()  .catch()

16 Services
   pass data from one component to another.
   If two component share same data then we used to create new service
  
  Create new service - ng g s service_name
   
  Create a new service API Service - ng g s services/api

17 HttpClientModule - for using http methods
    -> import HttpClientModule in app.module.ts

18 Dependancy Injection
    data sharing between dependent classes
    -> Perform inside the constructor
    -> constructor executes first
    Syntax : access specifier(public,private,protected) variable_name : class_name

    constructor(access specifier variable_name : class_name){}

19 Data Binding - Data sharing inside a component

    1. One way Data Binding - Data passes through one direction
    
        a. Component to view (ts -> html)
            1. String interpolation - {{variable_name}} - (html)
            2. Property Binding - [attribute_name]="Property_name"
        b. View to component (html -> ts)

            1. Event binding - (event)="function_name()"
                js Onclick
                ts (click)
            2. Event binding using $event - (event)="function_name($event)"

    2. Two way Data Binding - Data passing through two directions (ts -> html and html -> ts)
          ngModel -> [(ngModel)]="Property_name"
          -> imports formsModule in app.model.ts (ngModel)
          -> form i/p tag- name attribute must


20 Directives - To Manipulate DOM

    1. Component Directives
    2. Structural Directives
        a. *ngif   *ngif="condition"
        b. *ngFor  *ngFor="let variable_name of arrayy_name"

21 Activated Routes
    It provides access to information about a route associated with a component that is loaded in an outlet

    Parameters
      -> url
      -> params

22 Pipes
    Pipes are simple functions to use in template expressions to accept an input value and return a transformed value.

    Create a pipe in angular - ng g p pipe_folder/pipe_name
      -> Searching - ng g p pipes/filter